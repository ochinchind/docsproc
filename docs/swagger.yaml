basePath: /v1
definitions:
  dto.LoginDTO:
    properties:
      password:
        example: password
        type: string
      username:
        example: john.doe
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterDTO:
    properties:
      email:
        example: abc@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password
        type: string
      phone:
        example: "+1234567890"
        type: string
      role:
        enum:
        - admin
        - user
        - methodologist
        example: user
        type: string
      surname:
        example: Doe
        type: string
      username:
        example: john.doe
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  dto.UpdateUserDTO:
    properties:
      email:
        example: abc@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password
        type: string
      phone:
        example: "+1234567890"
        type: string
      role:
        enum:
        - admin
        - user
        - methodologist
        example: user
        type: string
      surname:
        example: Doe
        type: string
      username:
        example: john.doe
        type: string
    type: object
  entity.User:
    properties:
      api_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      email:
        example: abc@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      phone:
        example: "877755544434"
        type: string
      picture:
        example: https://example.com/picture.jpg
        type: string
      role:
        example: admin
        type: string
      surname:
        example: Doe
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  v1.getUsersResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  v1.googleCallbackResponse:
    properties:
      token:
        type: string
    type: object
  v1.loginResponse:
    properties:
      token:
        type: string
    type: object
  v1.response:
    properties:
      error:
        example: message
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Using a translation service as an example
  title: Go Clean Template API
  version: "1.0"
paths:
  /google_callback:
    get:
      consumes:
      - application/json
      description: Handles Google's OAuth callback, processes authentication, and
        returns an access token.
      operationId: google_callback
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/v1.googleCallbackResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Google OAuth Callback
      tags:
      - GoogleOAuth
  /google_login:
    get:
      consumes:
      - application/json
      description: Redirects the user to Google's OAuth authentication page.
      operationId: google_login
      produces:
      - application/json
      responses:
        "303":
          description: Redirect to Google login
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Google Login
      tags:
      - GoogleOAuth
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token.
      operationId: login
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/v1.loginResponse'
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/v1.response'
        "406":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: User Login
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns an access token.
      operationId: register
      parameters:
      - description: Register request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
          schema:
            $ref: '#/definitions/v1.loginResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/v1.response'
        "406":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: User Registration
      tags:
      - Auth
  /v1/users:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of users.
      operationId: get_users
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with user list
          schema:
            $ref: '#/definitions/v1.getUsersResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get Users
      tags:
      - Users
  /v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Fetch details of a user by their ID.
      operationId: get_user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with user details
          schema:
            $ref: '#/definitions/entity.User'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get User
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update details of an existing user by providing user ID and update
        data.
      operationId: update_user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully updated
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Update User
      tags:
      - Users
swagger: "2.0"
