basePath: /v1
definitions:
  dto.LoginDTO:
    properties:
      password:
        example: password
        type: string
      username:
        example: john.doe
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterDTO:
    properties:
      email:
        example: abc@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password
        type: string
      phone:
        example: "+1234567890"
        type: string
      role:
        enum:
        - admin
        - user
        - methodologist
        example: user
        type: string
      surname:
        example: Doe
        type: string
      username:
        example: john.doe
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  dto.StoreQualificationDTO:
    properties:
      code:
        example: "00342342413"
        type: string
      name:
        example: Qualification Name
        type: string
      specialty_id:
        example: 1
        type: integer
    required:
    - code
    - name
    - specialty_id
    type: object
  dto.StoreSpecialtyDTO:
    properties:
      code:
        example: "00342342413"
        type: string
      name:
        example: Specialty Name
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateProfileDTO:
    properties:
      name:
        example: John Doe
        type: string
      password:
        example: password
        type: string
      phone:
        example: "+1234567890"
        type: string
      surname:
        example: Doe
        type: string
      username:
        example: john.doe
        type: string
    type: object
  dto.UpdateQualificationDTO:
    properties:
      code:
        example: "00342342413"
        type: string
      name:
        example: Qualification Name
        type: string
      specialty_id:
        example: 1
        type: integer
    type: object
  dto.UpdateSpecialtyDTO:
    properties:
      code:
        example: "00342342413"
        type: string
      name:
        example: Specialty Name
        type: string
    type: object
  dto.UpdateUserDTO:
    properties:
      email:
        example: abc@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password
        type: string
      phone:
        example: "+1234567890"
        type: string
      role:
        enum:
        - admin
        - user
        - methodologist
        example: user
        type: string
      surname:
        example: Doe
        type: string
      username:
        example: john.doe
        type: string
    type: object
  entity.Discipline:
    properties:
      assessment_type:
        example: exam
        type: string
      code:
        example: JHN
        type: string
      competencies:
        example: 1,2,3
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      desc:
        example: John Doe
        type: string
      discipline_modules:
        items:
          $ref: '#/definitions/entity.DisciplineModule'
        type: array
      hours_individual:
        example: 0
        type: integer
      hours_internship:
        example: 0
        type: integer
      hours_practice:
        example: 50
        type: integer
      hours_self_study:
        example: 0
        type: integer
      hours_theory:
        example: 50
        type: integer
      hours_total:
        example: 100
        type: integer
      hours_with_teacher:
        example: 0
        type: integer
      id:
        example: 1
        type: integer
      lang:
        example: en
        type: string
      name:
        example: John
        type: string
      necessities:
        example: 1,2,3
        type: string
      post_requisites:
        example: 1,2,3
        type: string
      pre_requisites:
        example: 1,2,3
        type: string
      qualification_id:
        example: 1
        type: integer
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  entity.DisciplineModule:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      discipline_id:
        example: 1
        type: integer
      discipline_module_topics:
        items:
          $ref: '#/definitions/entity.DisciplineModuleTopic'
        type: array
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  entity.DisciplineModuleTopic:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      discipline_module_id:
        example: 1
        type: integer
      hours_individual:
        example: 0
        type: integer
      hours_internship:
        example: 0
        type: integer
      hours_practice:
        example: 50
        type: integer
      hours_self_study:
        example: 0
        type: integer
      hours_theory:
        example: 50
        type: integer
      hours_with_teacher:
        example: 0
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      type:
        example: practice
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  entity.Qualification:
    properties:
      code:
        example: JHN
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      disciplines:
        items:
          $ref: '#/definitions/entity.Discipline'
        type: array
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      specialty_id:
        example: 1
        type: integer
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    required:
    - code
    - name
    - specialty_id
    type: object
  entity.Specialty:
    properties:
      code:
        example: JHN
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      qualifications:
        items:
          $ref: '#/definitions/entity.Qualification'
        type: array
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    required:
    - code
    - name
    type: object
  entity.User:
    properties:
      api_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      email:
        example: abc@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      phone:
        example: "877755544434"
        type: string
      picture:
        example: https://example.com/picture.jpg
        type: string
      role:
        example: admin
        type: string
      surname:
        example: Doe
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  v1.getQualificationsResponse:
    properties:
      qualifications:
        items:
          $ref: '#/definitions/entity.Qualification'
        type: array
      total:
        type: integer
    type: object
  v1.getSpecialtiesResponse:
    properties:
      specialties:
        items:
          $ref: '#/definitions/entity.Specialty'
        type: array
      total:
        type: integer
    type: object
  v1.getUsersResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  v1.googleCallbackResponse:
    properties:
      token:
        type: string
    type: object
  v1.loginResponse:
    properties:
      token:
        type: string
    type: object
  v1.response:
    properties:
      message:
        example: message
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Using a translation service as an example
  title: Go Clean Template API
  version: "1.0"
paths:
  /google_callback:
    get:
      consumes:
      - application/json
      description: Handles Google's OAuth callback, processes authentication, and
        returns an access token.
      operationId: google_callback
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/v1.googleCallbackResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Google OAuth Callback
      tags:
      - GoogleOAuth
  /google_login:
    get:
      consumes:
      - application/json
      description: Redirects the user to Google's OAuth authentication page.
      operationId: google_login
      produces:
      - application/json
      responses:
        "303":
          description: Redirect to Google login
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Google Login
      tags:
      - GoogleOAuth
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token.
      operationId: login
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/v1.loginResponse'
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/v1.response'
        "406":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: User Login
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns an access token.
      operationId: register
      parameters:
      - description: Register request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
          schema:
            $ref: '#/definitions/v1.loginResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/v1.response'
        "406":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: User Registration
      tags:
      - Auth
  /v1/qualifications:
    get:
      consumes:
      - application/json
      description: Fetch a list of qualifications.
      operationId: get_qualifications
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with qualification list
          schema:
            $ref: '#/definitions/v1.getQualificationsResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get Qualifications
      tags:
      - Qualifications
    post:
      consumes:
      - application/json
      description: Store a new qualification.
      operationId: store_qualification
      parameters:
      - description: Qualification request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.StoreQualificationDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully stored
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Store Qualification
      tags:
      - Qualifications
  /v1/qualifications/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a qualification.
      operationId: delete_qualification
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Delete Qualification
      tags:
      - Qualifications
    get:
      consumes:
      - application/json
      description: Fetch a qualification by ID.
      operationId: get_qualification
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with qualification
          schema:
            $ref: '#/definitions/entity.Qualification'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get Qualification
      tags:
      - Qualifications
  /v1/specialties:
    get:
      consumes:
      - application/json
      description: Fetch a list of specialties.
      operationId: get_specialties
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with specialty list
          schema:
            $ref: '#/definitions/v1.getSpecialtiesResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get Specialties
      tags:
      - Specialties
    post:
      consumes:
      - application/json
      description: Store a new specialty.
      operationId: store_specialty
      parameters:
      - description: Specialty request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.StoreSpecialtyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully stored
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Store Specialty
      tags:
      - Specialties
  /v1/specialties/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specialty.
      operationId: delete_specialty
      parameters:
      - description: Specialty ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Delete Specialty
      tags:
      - Specialties
    get:
      consumes:
      - application/json
      description: Fetch a specialty by ID.
      operationId: get_specialty
      parameters:
      - description: Specialty ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with specialty
          schema:
            $ref: '#/definitions/entity.Specialty'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get Specialty
      tags:
      - Specialties
  /v1/users:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of users.
      operationId: get_users
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with user list
          schema:
            $ref: '#/definitions/v1.getUsersResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get Users
      tags:
      - Users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing user by providing user ID.
      operationId: delete_user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User successfully deleted
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Delete User
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Fetch details of a user by their ID.
      operationId: get_user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with user details
          schema:
            $ref: '#/definitions/entity.User'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get User
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update details of an existing user by providing user ID and update
        data.
      operationId: update_user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully updated
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Update User
      tags:
      - Users
  /v1/users/myprofile:
    patch:
      consumes:
      - application/json
      description: Update profile details of the currently authenticated user.
      operationId: update_profile
      parameters:
      - description: User update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileDTO'
      produces:
      - application/json
      responses:
        "200":
          description: User profile successfully updated
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Update Profile
      tags:
      - Users
swagger: "2.0"
